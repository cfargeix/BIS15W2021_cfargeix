curves_ylab="Response"))
iplotCurves(phe, times, phe[,c("T30", "T240")], phe[,c("T240", "T480")],
chartOpts=list(curves_xlab="Time", curves_ylab="Root tip angle",
scat1_xlab="Angle at 30 min", scat1_ylab="Angle at 4 hrs",
scat2_xlab="Angle at 4 hrs", scat2_ylab="Angle at 8 hrs"))
grav <- calc.genoprob(grav, step=1)
out.em <- scanone(grav, pheno.col=1:nphe(grav))
summary(out.em)
times_m <- c("T30", "T240", "T480")
times_clear <- c("30 mins", "4 hours", "8 hours")
times_number <- match(times_m, phenames(grav))
for(i in 1:length(times_m))
print(iplotScanone(out.em, lodcolumn=times_number[i], chartOpts=list(title=times_clear[i])))
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
?diff
library(tidyverse)
library(ggmap)
library(lubridate)
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[,i] <- (iris1[,i]*10)
i <- i + 1
if(i > 4) {
break
}
}
iris1
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
head(iris)     # Showing head of data in RStudio console
iris2 <- iris  # Replicate example data
i <- 1
while (i < 4) {
iris2[,1] <- (iris2[,1] * 10)
i <- i + 1
}
head(iris)     # Showing head of data in RStudio console
iris2 <- iris  # Replicate example data
i <- 1
while (i < 4) {
iris2[,1] <- (iris2[,1] * 10)
i <- i + 1
}
iris2
head(iris)     # Showing head of data in RStudio console
iris2 <- iris  # Replicate example data
i <- 1
while (i < 4) {
iris2[,1] <- (iris2[,1] / 10)
i <- i + 1
}
iris2
head(iris)     # Showing head of data in RStudio console
iris2 <- iris  # Replicate example data
i <- 1
while (i < 4) {
iris2[,1] <- (iris2[,1] * 10)
i <- i + 1
}
iris2
head(iris)     # Showing head of data in RStudio console
iris2 <- iris  # Replicate example data
z <- 1
while (z <= 4) {
iris2[,1] <- (iris2[,1] * 10)
z <- z + 1
}
iris2
head(iris)     # Showing head of data in RStudio console
iris2 <- iris  # Replicate example data
#z <- 1
#while (z <= 4) {
# iris2[,1] <- (iris2[,1] * 10)
# z <- z + 1
#}
iris2
head(iris)     # Showing head of data in RStudio console
iris2 <- iris  # Replicate example data
z <- 1
while (z <= 4) {
iris2[,z] <- (iris2[,z] * 10)
z <- z + 1
}
iris2
for (i in 1:10) {
print(i)
}
data3 <- data                       # Replicate example data
data3
for(i in 1:2) {           # for-loop over columns
data3[ , i] <- data3[ , i] + 100
}
data3
head(iris)              # Inspecting iris flower data set
iris3 <- iris           # Replicate iris data set
for(y in 1:4) {
iris3[,y] <- (iris3[,y] * 10)
}
iris3
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
# create an empty vector to store those counts
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# how to show them on a map?
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install()                            # To install core packages or update installed packages
# BiocManager::install(c("ShortRead", "Biostrings"))# Install specific packages
library(ShortRead)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()                            # To install core packages or update installed packages
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install()                            # To install core packages or update installed packages
BiocManager::install(c("ShortRead", "Biostrings"))# Install specific packages
library(ShortRead)
library(Biostrings)
reads <- readFasta("data/archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
gc_content
data_files2 <- list.files("data/archaea-dna")
data_files2
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
install.packages("qtl")
install.packages("qtlcharts")
library(qtl)
library(qtlcharts)
knitr::opts_chunk$set(fig.width=8, fig.height=6, message=FALSE)
?read.cross
sug <- read.cross("csv", "https://rqtl.org", "sug.csv",
genotypes=c("CC", "CB", "BB"), alleles=c("C", "B"))
summary(sug)
head(sug$pheno)
nind(sug)    # No. individuals
nphe(sug)    # No. phenotypes
nchr(sug)    # No. chromosomes
totmar(sug)  # Total markers
nmar(sug)    # No. markers on each chromosome
plot(sug)
#?plotMissing
plotMissing(sug, main="")
plotMissing(sug, main="", reorder=1)
#?plotMap
plotMap(sug)
plotMap(sug,show.marker.names=TRUE)
#?plotPheno
plotPheno(sug, pheno.col=1)
plotPheno(sug, pheno.col=2)
plotPheno(sug, pheno.col=3)
plotPheno(sug, pheno.col=4)
iplotMap(sug) #D7MIT31
iplotCorr(sug$pheno)
iplotCorr(sug$pheno, chartOpts=list(height=300, width=600, scatcolors="pink"))
corrplot <- iplotCorr(sug$pheno, chartOpts=list(height=300, width=600, scatcolors="pink"))
htmlwidgets::saveWidget(corrplot, file="iplotCorr_example.html")
sug <- calc.genoprob(sug, step=1)
out.em <- scanone(sug)
out.em2 <- scanone(sug, pheno.col=1:4)
summary(out.em)
summary(out.em2)
summary(out.em, threshold=3)
plot(out.em)
plot(out.em, chr=c(7,15), ylab="LOD Score")
iplotScanone(out.em)
iplotScanone(out.em, chr=c(7,15))
iplotScanone(out.em, sug)
iplotScanone(out.em, sug, chr=c(7,15))
data(grav)
summary(grav)
plot(grav)
iplotMap(grav)
iplotCorr(grav$pheno)
iplotCorr(grav$pheno, chartOpts=list(height=300, width=600, scatcolors="pink"))
iplotCurves(grav$pheno)
times1 <- as.numeric(sub("T", "", phenames(grav)))/60
times1
times <- attr(grav, "time")
times
#?attr
phe <- grav$pheno
head(phe)
iplotCurves(phe, times)
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
data_files <- list.files("data/individual_collar_data", full.names = TRUE)
data_files
data_files <- list.files("data/individual_collar_data", full.names = TRUE)
data_files
for (i in 1:length(data_files)) {
data <- as.data.frame(read_csv(data_files[i]))
print(
ggplot(data, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files[i], x = "longitude", y = "latitude")
)
}
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)), count = vector(mode = "integer", length = length(data_files)))
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)), count = vector(mode = "integer", length = length(data_files)))
results
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)), count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)), count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
results <- data.frame(number = vector(mode = "character", length = length(data_files)), date = vector(mode = "character", length = length(data_files)), collar = vector(mode = "character", length = length(data_files)), time = vector(mode = "character", length = length(data_files)), lat = vector(mode = "double", length = length(data_files)), long = vector(mode = "character", length = length(data_files)))
results
results <- data.frame(number = vector(mode = "character", length = length(data_files)), date = vector(mode = "character", length = length(data_files)), collar = vector(mode = "character", length = length(data_files)), time = vector(mode = "character", length = length(data_files)), lat = vector(mode = "double", length = length(data_files)), long = vector(mode = "double", length = length(data_files)))
results
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
for (j in 2:length(data0)) {
rbind(results,data0[j,])
}
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
table_A <- read_csv(here("lab12", "data", "table_A.csv"))
data0 <- as.data.frame(read_csv(data_files[1]))
data_files
data0 <- as.data.frame(read_csv(data_files[1]))
data0 <- as.data.frame(read_csv(data_files[1]))
data0
totals <- as.data.frame(read_csv(data_files[1]))
totals
?inner_join
?merge
for (i in 2:length(data_files)) {
data0 <- as.data.frame(read_csv(data_files[i]))
totals <- merge(data0, totals)
}
totals
data1 <- as.data.frame(read_csv(data_files[1]))
data2 <- as.data.frame(read_csv(data_files[2]))
data_tot <- merge(data1, data2)
data1 <- as.data.frame(read_csv(data_files[1]))
data2 <- as.data.frame(read_csv(data_files[2]))
data_tot <- merge(data1, data2)
data_tot
data1 <- as.data.frame(read_csv(data_files[1]))
data2 <- as.data.frame(read_csv(data_files[2]))
data_tot <- inner_join(data1, data2)
data_tot
data1 <- as.data.frame(read_csv(data_files[1]))
data2 <- as.data.frame(read_csv(data_files[2]))
data1
data2
full_join(data1, data2)
full_join(data1, data2)
for (i in 2:length(data_files)) {
data0 <- as.data.frame(read_csv(data_files[i]))
totals <- full_join(data0, totals)
}
totals
for (i in 1:length(data_files)) {
data0 <- as.data.frame(read_csv(data_files[i]))
totals <- full_join(data0, totals)
}
totals
totals <- as.data.frame(read_csv(data_files[1]))
for (i in 2:length(data_files)) {
data0 <- as.data.frame(read_csv(data_files[i]))
totals <- merge(data0, totals)
}
totals
for (i in 2:length(data_files)) {
data0 <- as.data.frame(read_csv(data_files[i]))
totals <- merge(data0, totals)
}
totals
for (i in 2:length(data_files)) {
data0 <- as.data.frame(read_csv(data_files[i]))
totals <- merge(data0, totals)
}
totals
data_files <- list.files("data/individual_collar_data", full.names = TRUE)
data_files
for (i in 1:length(data_files)) {
data <- as.data.frame(read_csv(data_files[i]))
print(
ggplot(data, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files[i], x = "Longitude", y = "Latitude")
)
}
totals <- as.data.frame(read_csv(data_files[1]))
totals <- as.data.frame(read_csv(data_files[1]))
totals
for (i in 2:length(data_files)) {
data <- as.data.frame(read_csv(data_files[i]))
totals <- merge(data, totals)
}
totals
for (i in 2:length(data_files)) {
data <- as.data.frame(read_csv(data_files[i]))
totals <- full_join(data, totals)
}
totals
for (i in 1:length(data_files)) {
data <- as.data.frame(read_csv(data_files[i]))
totals <- full_join(data, totals)
}
totals
summary(totals)
lat <- c(14.92, 31.57)
long <- c(122.1, 135.0)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files)){
data_map <- as.data.frame(read_csv(data_files[i]))
print(
ggmap(map)+
geom_path(data = data_map, aes(long,lat))+
geom_point(data = data_map, aes(long,lat))+
labs(title = data_files[i], x = "longitude", y = "latitude")
)
}
?hyper
data(hyper)
summary(hyper)
hyper
nmar(hyper)
iplotMap(hyper)
plotMissing(hyper, main="")
plotMissing(hyper)
plotMissing(hyper, main="")
plotMissing(hyper, main="", reorder=1)
plot(sug)
sug <- read.cross("csv", "https://rqtl.org", "sug.csv",
genotypes=c("CC", "CB", "BB"), alleles=c("C", "B"))
plot(sug)
?plotMissing
plotMissing(hyper, main="", reorder=2)
drop.nullmarkers(hyper)
summary(hyper)
hyper2 <- drop.nullmarkers(hyper)
summary(hyper2)
nmar(hyper2)
?calc.genoprob
hyper_lods <- scanone(hyper)
hyper <- calc.genoprob(hyper, step=1)
hyper_lods <- scanone(hyper)
summary(hyper_lods)
iplotScanone(hyper_lods)
summary(hyper_lods, threshold=1)
iplotScanone(hyper_lods, chr=c(1, 2, 4, 5, 6, 15))
iplotCurves(hyper2$pheno)
iplotCurves(hyper2$phenotype)
iplotCurves(hyper2$phenotypes)
iplotCurves(hyper2$pheno)
iplotCurves(hyper$pheno)
iplotCurves(hyper2$pheno)
hyper2$pheno
hyper2$geno
select(hyper, bp, D4Mit164)
iplotCurves(phe, times)
phe <- hyper$pheno
gen <- hyper$geno
iplotCurves(phe, times)
iplotCurves(phe, gen)
phenames(hyper)
genames(hyper)
View(hyper2)
q9_chart <- iplotScanone(hyper_lods, chr=c(1, 2, 4, 5, 6, 15))
htmlwidgets::saveWidget(q9_chart, file="hyper_iplotScanone.html")
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
# create an empty vector to store those counts
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# how to show them on a map?
# summary table
data_list <- lapply(data_files3, read_csv)
collar_data_all <- bind_rows(data_list)
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
